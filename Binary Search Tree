public class Tree {
	
	// recursive method for pre-order  
    protected void preorder(TreeNode p) {  
        if (p != null) {  
            System.out.print(p.val + ",");;  
            preorder(p.left);  
            preorder(p.right);  
        }  
    }  
   
    // recursive method for in-order 
    protected void inorder(TreeNode p) {  
        if (p != null) {  
            inorder(p.left);  
            System.out.print(p.val + ",");  
            inorder(p.right);  
        }  
    }  
  
    // recursive method for post-order
    protected void postorder(TreeNode p) {  
        if (p != null) {  
            postorder(p.left);  
            postorder(p.right);  
            System.out.print(p.val+ ",");  
        }  
    }  
    
	//get the minimal value of the tree
	public TreeNode getMin(TreeNode root){  
        if(root==null)  
            return null;  
        while(root.left!=null)  
            root=root.left;    
        return root;  
    }  
	
	
	//get the maximal value of the tree
	public TreeNode getMax(TreeNode root){  
        if(root==null)  
            return null;  
        while(root.right!=null)  
            root=root.right;  
        return root;  
    }
	
	//search recursively
	public TreeNode searchRec(TreeNode root ,int val){  
        if(root==null)  
            return root;  
        if(val<root.val)  
            return searchRec(root.left,val);  
        else if(val>root.val)  
            return searchRec(root.right,val);  
        else  
            return root;  
    }  
	
	//search in a loop
	public TreeNode search(TreeNode root ,int val){  
        if(root==null)  
            return root;  
        while(root!=null)  
        {  
            if(val<root.val)  
                root=root.left;  
            else if(val>root.val)  
                root=root.right;  
            else  
                return root;  
        }  
        return root;  
    }  
	
	//insert recursively
	public TreeNode insertRec(TreeNode root,TreeNode x){  
        if(root==null)  
            root=x;  
        else if(x.val<root.val)  
            root.left=insertRec(root.left,  x);  
        else if(x.val>root.val)  
            root.right=insertRec(root.right,  x);  
        return root;  
    }  
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		TreeNode n0 = new TreeNode(1);
		TreeNode n1 = new TreeNode(2);
		TreeNode n2 = new TreeNode(2);
		TreeNode n3 = new TreeNode(3);
		TreeNode n4 = new TreeNode(0);
		TreeNode n5 = new TreeNode(3);
		TreeNode n6 = new TreeNode(0);
		TreeNode n7 = new TreeNode(8);
		TreeNode n8 = new TreeNode(9);
		TreeNode n9 = new TreeNode(10);
		
		n0.left = n1; n0.right = n2;
		n1.left = n3; n1.right = n4; n2.left = n5; n2.right = n6;
		Tree tree  = new Tree();
		System.out.println("Preorder:");
		tree.preorder(n1);
		System.out.println();
		System.out.println("Inorder:");
		tree.inorder(n1);
		System.out.println();
		System.out.println("Postorder:");
		tree.postorder(n1);
		
	}

}


//Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

