public class Tree {
	
	 /** 递归实现前序遍历 */  
    protected void preorder(TreeNode p) {  
        if (p != null) {  
            System.out.println(p.val);;  
            preorder(p.left);  
            preorder(p.right);  
        }  
    }  
  
    /** 递归实现中序遍历 */  
    protected void inorder(TreeNode p) {  
        if (p != null) {  
            inorder(p.left);  
            System.out.println(p.val);  
            inorder(p.right);  
        }  
    }  
  
    /** 递归实现后序遍历 */  
    protected void postorder(TreeNode p) {  
        if (p != null) {  
            postorder(p.left);  
            postorder(p.right);  
            System.out.println(p.val);  
        }  
    }  
    
//===========end of 10/3/2016============
    /** 非递归实现前序遍历 */  
    protected static void iterativePreorder(Node p) {  
        Stack<Node> stack = new Stack<Node>();  
        if (p != null) {  
            stack.push(p);  
            while (!stack.empty()) {  
                p = stack.pop();  
                visit(p);  
                if (p.getRight() != null)  
                    stack.push(p.getRight());  
                if (p.getLeft() != null)  
                    stack.push(p.getLeft());  
            }  
        }  
    }  
  
    /** 非递归实现前序遍历2 */  
    protected static void iterativePreorder2(Node p) {  
        Stack<Node> stack = new Stack<Node>();  
        Node node = p;  
        while (node != null || stack.size() > 0) {  
            while (node != null) {//压入所有的左节点，压入前访问它  
                visit(node);  
                stack.push(node);  
                node = node.getLeft();  
            }  
            if (stack.size() > 0) {//  
                node = stack.pop();  
                node = node.getRight();  
            }  
        }  
    }  
  
    /** 非递归实现后序遍历 */  
    protected static void iterativePostorder(Node p) {  
        Node q = p;  
        Stack<Node> stack = new Stack<Node>();  
        while (p != null) {  
            // 左子树入栈  
            for (; p.getLeft() != null; p = p.getLeft())  
                stack.push(p);  
            // 当前节点无右子或右子已经输出  
            while (p != null && (p.getRight() == null || p.getRight() == q)) {  
                visit(p);  
                q = p;// 记录上一个已输出节点  
                if (stack.empty())  
                    return;  
                p = stack.pop();  
            }  
            // 处理右子  
            stack.push(p);  
            p = p.getRight();  
        }  
    }  
  
    /** 非递归实现后序遍历 双栈法 */  
    protected static void iterativePostorder2(Node p) {  
        Stack<Node> lstack = new Stack<Node>();  
        Stack<Node> rstack = new Stack<Node>();  
        Node node = p, right;  
        do {  
            while (node != null) {  
                right = node.getRight();  
                lstack.push(node);  
                rstack.push(right);  
                node = node.getLeft();  
            }  
            node = lstack.pop();  
            right = rstack.pop();  
            if (right == null) {  
                visit(node);  
            } else {  
                lstack.push(node);  
                rstack.push(null);  
            }  
            node = right;  
        } while (lstack.size() > 0 || rstack.size() > 0);  
    }  
  
    /** 非递归实现后序遍历 单栈法*/  
    protected static void iterativePostorder3(Node p) {  
        Stack<Node> stack = new Stack<Node>();  
        Node node = p, prev = p;  
        while (node != null || stack.size() > 0) {  
            while (node != null) {  
                stack.push(node);  
                node = node.getLeft();  
            }  
            if (stack.size() > 0) {  
                Node temp = stack.peek().getRight();  
                if (temp == null || temp == prev) {  
                    node = stack.pop();  
                    visit(node);  
                    prev = node;  
                    node = null;  
                } else {  
                    node = temp;  
                }  
            }  
  
        }  
    }  
  
    /** 非递归实现后序遍历4 双栈法*/  
    protected static void iterativePostorder4(Node p) {  
        Stack<Node> stack = new Stack<Node>();  
        Stack<Node> temp = new Stack<Node>();  
        Node node = p;  
        while (node != null || stack.size() > 0) {  
            while (node != null) {  
                temp.push(node);  
                stack.push(node);  
                node = node.getRight();  
            }  
            if (stack.size() > 0) {  
                node = stack.pop();  
                node = node.getLeft();  
            }  
        }  
        while (temp.size() > 0) {  
            node = temp.pop();  
            visit(node);  
        }  
    }  
  
    /** 非递归实现中序遍历 */  
    protected static void iterativeInorder(Node p) {  
        Stack<Node> stack = new Stack<Node>();  
        while (p != null) {  
            while (p != null) {  
                if (p.getRight() != null)  
                    stack.push(p.getRight());// 当前节点右子入栈  
                stack.push(p);// 当前节点入栈  
                p = p.getLeft();  
            }  
            p = stack.pop();  
            while (!stack.empty() && p.getRight() == null) {  
                visit(p);  
                p = stack.pop();  
            }  
            visit(p);  
            if (!stack.empty())  
                p = stack.pop();  
            else  
                p = null;  
        }  
    }  
  
    /** 非递归实现中序遍历2 */  
    protected static void iterativeInorder2(Node p) {  
        Stack<Node> stack = new Stack<Node>();  
        Node node = p;  
        while (node != null || stack.size() > 0) {  
            while (node != null) {  
                stack.push(node);  
                node = node.getLeft();  
            }  
            if (stack.size() > 0) {  
                node = stack.pop();  
                visit(node);  
                node = node.getRight();  
            }  
        }  
    }
	//get the minimal value of the tree
	public TreeNode getMin(TreeNode root){  
        if(root==null)  
            return null;  
        while(root.left!=null)  
            root=root.left;    
        return root;  
    }  
	
	
	//get the maximal value of the tree
	public TreeNode getMax(TreeNode root){  
        if(root==null)  
            return null;  
        while(root.right!=null)  
            root=root.right;  
        return root;  
    }
	
	//search recursively
	public TreeNode searchRec(TreeNode root ,int val){  
        if(root==null)  
            return root;  
        if(val<root.val)  
            return searchRec(root.left,val);  
        else if(val>root.val)  
            return searchRec(root.right,val);  
        else  
            return root;  
    }  
	
	//search in a loop
	public TreeNode search(TreeNode root ,int val){  
        if(root==null)  
            return root;  
        while(root!=null)  
        {  
            if(val<root.val)  
                root=root.left;  
            else if(val>root.val)  
                root=root.right;  
            else  
                return root;  
        }  
        return root;  
    }  
	
	//insert recursively
	public TreeNode insertRec(TreeNode root,TreeNode x){  
        if(root==null)  
            root=x;  
        else if(x.val<root.val)  
            root.left=insertRec(root.left,  x);  
        else if(x.val>root.val)  
            root.right=insertRec(root.right,  x);  
        return root;  
    }  
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}


//Definition for a binary tree node.
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

